/// JAVASCRIPT SOLUTION

/**
 * @param {number[]} nums
 * @return {number}
 */
let thirdMax = function(nums) {
  let thirdMax = -Infinity;
  let secondMax = -Infinity;
  let max = nums[0];

  for (let i = 1; i < nums.length; i++) {
    let num = nums[i];

    if (num > max) {
      thirdMax = secondMax;
      secondMax = max;
      max = num;
    } else if (num < max && num > secondMax) {
      thirdMax = secondMax;
      secondMax = num;
    } else if (num < secondMax && num > thirdMax) {
      thirdMax = num;
    }
  }

  return thirdMax === -Infinity ? max : thirdMax;  
};










/// JAVA SOLUTION
/// GOT TLE
class Solution {
    public int thirdMax(int[] nums) {
        
        Arrays.sort(nums); // ALSO TRIED OUT WITH CYCLIC SORT
        int max = nums[nums.length-1];
        int second_max = 0;
        int third_max = 0;
        for(int i=nums.length-1; i>=0; i--){
            if(nums[i] > max){
                max = nums[i];
            }
            else if (nums[i] < max && nums[i] > second_max && nums[i] > third_max){
                second_max = nums[i];
            }
            else if (nums[i]<max && nums[i]<second_max) {
                third_max = nums[i];
            }
        }
        
        
        if(third_max==0){
            return max;
        }
        else{
            return third_max;
        }
    }
}


/// ALSO TRIED WITH SINGLE WHILE LOOP after sorting (i<3)- to find third max 
